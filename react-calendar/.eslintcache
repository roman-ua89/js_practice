[{"E:\\js_learning\\react-calendar\\src\\index.js":"1","E:\\js_learning\\react-calendar\\src\\reportWebVitals.js":"2","E:\\js_learning\\react-calendar\\src\\App.js":"3","E:\\js_learning\\react-calendar\\src\\components\\WeekDaysHeader\\WeekDaysHeader.js":"4","E:\\js_learning\\react-calendar\\src\\components\\WeekDaysGrid\\WeekDaysGrid.js":"5","E:\\js_learning\\react-calendar\\src\\components\\WeekDaysSwitcher\\WeekDaysSwitcher.js":"6","E:\\js_learning\\react-calendar\\src\\components\\InfoPopup\\InfoPopup.js":"7","E:\\js_learning\\react-calendar\\src\\components\\DayPopup\\DayPopup.js":"8","E:\\js_learning\\react-calendar\\src\\UI\\Mood\\Mood.js":"9","E:\\js_learning\\react-calendar\\src\\UI\\NumberInput\\NumberInput.js":"10","E:\\js_learning\\react-calendar\\src\\helpers\\helpers.js":"11","E:\\js_learning\\react-calendar\\src\\components\\Calendar\\Calendar.js":"12","E:\\js_learning\\react-calendar\\src\\UI\\MicroDatePicker\\MicroDatePicker.js":"13"},{"size":500,"mtime":499162500000,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":351,"mtime":1612629706239,"results":"17","hashOfConfig":"15"},{"size":344,"mtime":1612339760534,"results":"18","hashOfConfig":"15"},{"size":1063,"mtime":1612609179214,"results":"19","hashOfConfig":"15"},{"size":733,"mtime":1612611193551,"results":"20","hashOfConfig":"15"},{"size":1616,"mtime":1612611625338,"results":"21","hashOfConfig":"15"},{"size":6290,"mtime":1612629744231,"results":"22","hashOfConfig":"15"},{"size":1041,"mtime":1612610912629,"results":"23","hashOfConfig":"15"},{"size":1788,"mtime":1612611038891,"results":"24","hashOfConfig":"15"},{"size":864,"mtime":1612606230768,"results":"25","hashOfConfig":"15"},{"size":9215,"mtime":1612629671925,"results":"26","hashOfConfig":"15"},{"size":4471,"mtime":1612630448898,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1q0help",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},"E:\\js_learning\\react-calendar\\src\\index.js",[],["59","60"],"E:\\js_learning\\react-calendar\\src\\reportWebVitals.js",[],"E:\\js_learning\\react-calendar\\src\\App.js",[],"E:\\js_learning\\react-calendar\\src\\components\\WeekDaysHeader\\WeekDaysHeader.js",[],"E:\\js_learning\\react-calendar\\src\\components\\WeekDaysGrid\\WeekDaysGrid.js",[],"E:\\js_learning\\react-calendar\\src\\components\\WeekDaysSwitcher\\WeekDaysSwitcher.js",[],"E:\\js_learning\\react-calendar\\src\\components\\InfoPopup\\InfoPopup.js",[],"E:\\js_learning\\react-calendar\\src\\components\\DayPopup\\DayPopup.js",[],"E:\\js_learning\\react-calendar\\src\\UI\\Mood\\Mood.js",["61"],"import React from 'react';\r\nimport {useEffect, useState} from 'react';\r\nimport './Mood.css';\r\n\r\nconst Mood = (props) => {\r\n\r\n    let defaultValue = (props.defaultValue) ? props.defaultValue : '';\r\n    let [mood, setMood] = useState(defaultValue);\r\n\r\n    useEffect(() => {\r\n        if(props.notifyIfDirty !== undefined) {\r\n            props.notifyIfDirty({\r\n                fieldName: props.name,\r\n                isDirty: !!mood,\r\n                value: mood\r\n            })\r\n        }\r\n    }, [mood]);\r\n\r\n    useEffect(() => (props.reset && setMood(null)), [props.reset]);\r\n\r\n    return (\r\n        <>\r\n            <button\r\n                onClick={() => setMood('happy')}\r\n                className={'moodBtn happy ' + (mood === 'happy' ? 'active': '')}><i className={'fal fa-smile-beam'}></i></button>\r\n            <button\r\n                onClick={() => setMood('sad')}\r\n                className={'moodBtn sad ' + (mood === 'sad' ? 'active': '')}><i className={'fal fa-frown'}></i></button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Mood;",["62","63"],"E:\\js_learning\\react-calendar\\src\\UI\\NumberInput\\NumberInput.js",["64","65"],"import React from 'react';\r\nimport {useRef, useState, useEffect} from 'react';\r\nimport './NumberInput.css';\r\n\r\nconst NumberInput = (props) => {\r\n\r\n    const inputRef = useRef();\r\n    const defaultInputValue = (props.defaultValue) ? props.defaultValue : 0;\r\n    let [value, setValue] = useState(defaultInputValue);\r\n    let [focus, setFocus] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if(props.notifyIfDirty !== undefined) {\r\n            props.notifyIfDirty({\r\n                fieldName: props.name,\r\n                isDirty: !!value,\r\n                value\r\n            })\r\n        }\r\n    }, [value])\r\n\r\n    useEffect(() => resetData(), [props.reset]);\r\n\r\n    const resetData = () => setValue(defaultInputValue);\r\n\r\n    const changeValue = (v) => {\r\n        setValue(prev => {\r\n            return (prev + v <= 0) ? 0 : prev + v;\r\n        });\r\n    }\r\n\r\n    const onChangeHandle = (e) => {\r\n        let value = Number(e.target.value);\r\n        setValue(prevValue => {\r\n            return (isNaN(value)) ? prevValue : Math.abs(value);\r\n        })\r\n    }\r\n\r\n    const onBlurHandle = e => setFocus(false);\r\n\r\n    const onFocusHandle = e => setFocus(true);\r\n\r\n    return (\r\n        <div className={'numberInputOuter ' + (focus ? ' focus ' : '')}>\r\n            {!props.hideButtons && <button onClick={() => changeValue(-1)}><i className={'fal fa-minus'}></i></button>}\r\n            <input\r\n                onBlur={onBlurHandle}\r\n                onFocus={onFocusHandle}\r\n                ref={inputRef}\r\n                value={value}\r\n                onChange={onChangeHandle}\r\n                type={'text'} />\r\n            {!props.hideButtons && <button onClick={() => changeValue(+1)}><i className={'fal fa-plus'}></i></button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NumberInput;","E:\\js_learning\\react-calendar\\src\\helpers\\helpers.js",[],"E:\\js_learning\\react-calendar\\src\\components\\Calendar\\Calendar.js",[],"E:\\js_learning\\react-calendar\\src\\UI\\MicroDatePicker\\MicroDatePicker.js",["66","67","68"],"import React from 'react';\r\nimport {useState, useEffect} from 'react';\r\nimport './MicroDatePicker.css';\r\nimport helpers from \"../../helpers/helpers\";\r\n\r\nconst MicroDatePicker = (props) => {\r\n\r\n    let defaultTimestamp = props.selectedTimestamp;\r\n    let [timestampToWorkWith, setTimestampToWorkWith] = useState(defaultTimestamp);\r\n\r\n    let [visibility, setVisibility] = useState(false);\r\n    let [pickerDate, setPickerDate] = useState('');\r\n\r\n    let [selectDay, setSelectDay] = useState(null);\r\n    let [selectMonth, setSelectMonth] = useState(null);\r\n    let [selectYear, setSelectYear] = useState(null);\r\n\r\n    let [daysInSelectedMonth, setDaysInSelectedMonth] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setPickerDate(timestampToString());\r\n        const selectedDate = new Date(timestampToWorkWith)\r\n        const daysInCurrentMonth = (new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 0).getDate());\r\n        setDaysInSelectedMonth(daysInCurrentMonth);\r\n    });\r\n\r\n    useEffect(() => {\r\n        if(props.notifyIfDirty !== undefined) {\r\n            props.notifyIfDirty({\r\n                fieldName: props.name,\r\n                isDirty: isDateChanged(),\r\n                value: helpers.timestampToKey(timestampToWorkWith)\r\n            })\r\n        }\r\n    }, [timestampToWorkWith])\r\n\r\n    useEffect(() => resetData(), [props.reset]);\r\n\r\n    const isDateChanged = () => (helpers.timestampToKey(defaultTimestamp) !== helpers.timestampToKey(timestampToWorkWith));\r\n\r\n    const resetData = () => setTimestampToWorkWith(defaultTimestamp);\r\n\r\n    const timestampToString = () => {\r\n        const date = new Date(timestampToWorkWith),\r\n              day = date.getDate(),\r\n              month = date.getMonth() + 1,\r\n              year = date.getFullYear();\r\n\r\n        setSelectDay(day);\r\n        setSelectMonth(date.getMonth());\r\n        setSelectYear(year);\r\n        return (day <=9 ? '0' + day : day) + '.' + (month <= 9 ? '0' + month : month) + '.' + year;\r\n    }\r\n\r\n    const onDayChangeHandler = (e) => {\r\n        const newDay = new Date(timestampToWorkWith).setDate(e.target.value);\r\n        setTimestampToWorkWith(newDay)\r\n    }\r\n\r\n    const onMonthChangeHandler = (e) => {\r\n        const newMonth = new Date(timestampToWorkWith).setMonth(e.target.value);\r\n        setTimestampToWorkWith(newMonth);\r\n    }\r\n\r\n    const onYearChangeHandler = (e) => {\r\n        const newYear = new Date(timestampToWorkWith).setFullYear(e.target.value);\r\n        setTimestampToWorkWith(newYear);\r\n    }\r\n\r\n    return (\r\n        <div className={'microPickerOuter'}>\r\n            <div className={'microPickerField'}>\r\n                {visibility\r\n                    ? <div className={'microPickerDate'}>\r\n                        <select\r\n                            onChange={onDayChangeHandler}\r\n                            className={'microPickerDay'}\r\n                            value={selectDay}>\r\n                            {Array(daysInSelectedMonth).fill('').map((_, i) => <option value={i+1} key={i+1}>{i+1}</option>)}\r\n                        </select>\r\n                        <select\r\n                            onChange={onMonthChangeHandler}\r\n                            className={'microPickerMonth'}\r\n                            value={selectMonth}>\r\n                            {props.months.map((month, i) => <option value={i} key={month}>{month}</option>)}\r\n                        </select>\r\n                        <select\r\n                            onChange={onYearChangeHandler}\r\n                            className={'microPickerYear'}\r\n                            value={selectYear}>\r\n                            <option value={'2020'}>2020</option>\r\n                            <option value={'2021'}>2021</option>\r\n                            <option value={'2022'}>2022</option>\r\n                        </select>\r\n                    </div>\r\n                    : <span className={'microPickerDefaultDate'}>{pickerDate}</span>}\r\n                <div className={'microPickerAction'}>\r\n                    {visibility\r\n                        ? <button onClick={() => setVisibility(false)} className={'microPickerClose text-green'}><i className={'fal fa-check'}></i></button>\r\n                        : <button onClick={() => setVisibility(true)} className={'microPickerOpen'}><i className={'fal fa-calendar-alt'}></i></button>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MicroDatePicker;",{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":18,"column":8,"nodeType":"75","endLine":18,"endColumn":14,"suggestions":"76"},{"ruleId":"69","replacedBy":"77"},{"ruleId":"71","replacedBy":"78"},{"ruleId":"73","severity":1,"message":"74","line":20,"column":8,"nodeType":"75","endLine":20,"endColumn":15,"suggestions":"79"},{"ruleId":"73","severity":1,"message":"80","line":22,"column":34,"nodeType":"75","endLine":22,"endColumn":47,"suggestions":"81"},{"ruleId":"73","severity":1,"message":"82","line":20,"column":5,"nodeType":"83","endLine":20,"endColumn":14,"suggestions":"84"},{"ruleId":"73","severity":1,"message":"85","line":35,"column":8,"nodeType":"75","endLine":35,"endColumn":29,"suggestions":"86"},{"ruleId":"73","severity":1,"message":"80","line":37,"column":34,"nodeType":"75","endLine":37,"endColumn":47,"suggestions":"87"},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["90"],["88"],["89"],["91"],"React Hook useEffect has a missing dependency: 'resetData'. Either include it or remove the dependency array.",["92"],"React Hook useEffect contains a call to 'setPickerDate'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [timestampToString, timestampToWorkWith] as a second argument to the useEffect Hook.","Identifier",["93"],"React Hook useEffect has missing dependencies: 'isDateChanged' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["94"],["95"],"no-global-assign","no-unsafe-negation",{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},{"desc":"104","fix":"105"},{"desc":"100","fix":"106"},"Update the dependencies array to be: [mood, props]",{"range":"107","text":"108"},"Update the dependencies array to be: [props, value]",{"range":"109","text":"110"},"Update the dependencies array to be: [props.reset, resetData]",{"range":"111","text":"112"},"Add dependencies array: [timestampToString, timestampToWorkWith]",{"range":"113","text":"114"},"Update the dependencies array to be: [isDateChanged, props, timestampToWorkWith]",{"range":"115","text":"116"},{"range":"117","text":"112"},[494,500],"[mood, props]",[602,609],"[props, value]",[647,660],"[props.reset, resetData]",[987,987],", [timestampToString, timestampToWorkWith]",[1285,1306],"[isDateChanged, props, timestampToWorkWith]",[1344,1357]]